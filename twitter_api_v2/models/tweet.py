# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints

    The version of the OpenAPI document: 2.79
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
from twitter_api_v2.models.context_annotation import ContextAnnotation
from twitter_api_v2.models.full_text_entities import FullTextEntities
from twitter_api_v2.models.reply_settings_with_verified_users import ReplySettingsWithVerifiedUsers
from twitter_api_v2.models.tweet_attachments import TweetAttachments
from twitter_api_v2.models.tweet_edit_controls import TweetEditControls
from twitter_api_v2.models.tweet_geo import TweetGeo
from twitter_api_v2.models.tweet_non_public_metrics import TweetNonPublicMetrics
from twitter_api_v2.models.tweet_note_tweet import TweetNoteTweet
from twitter_api_v2.models.tweet_organic_metrics import TweetOrganicMetrics
from twitter_api_v2.models.tweet_promoted_metrics import TweetPromotedMetrics
from twitter_api_v2.models.tweet_public_metrics import TweetPublicMetrics
from twitter_api_v2.models.tweet_referenced_tweets_inner import TweetReferencedTweetsInner
from twitter_api_v2.models.tweet_withheld import TweetWithheld
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Tweet(BaseModel):
    """
    Tweet
    """ # noqa: E501
    attachments: Optional[TweetAttachments] = None
    author_id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.")
    context_annotations: Optional[Annotated[List[ContextAnnotation], Field(min_length=1)]] = None
    conversation_id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.")
    created_at: Optional[datetime] = Field(default=None, description="Creation time of the Tweet.")
    edit_controls: Optional[TweetEditControls] = None
    edit_history_tweet_ids: Annotated[List[Annotated[str, Field(strict=True)]], Field(min_length=1)] = Field(description="A list of Tweet Ids in this Tweet chain.")
    entities: Optional[FullTextEntities] = None
    geo: Optional[TweetGeo] = None
    id: Annotated[str, Field(strict=True)] = Field(description="Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.")
    in_reply_to_user_id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.")
    lang: Optional[StrictStr] = Field(default=None, description="Language of the Tweet, if detected by Twitter. Returned as a BCP47 language tag.")
    non_public_metrics: Optional[TweetNonPublicMetrics] = None
    note_tweet: Optional[TweetNoteTweet] = None
    organic_metrics: Optional[TweetOrganicMetrics] = None
    possibly_sensitive: Optional[StrictBool] = Field(default=None, description="Indicates if this Tweet contains URLs marked as sensitive, for example content suitable for mature audiences.")
    promoted_metrics: Optional[TweetPromotedMetrics] = None
    public_metrics: Optional[TweetPublicMetrics] = None
    referenced_tweets: Optional[Annotated[List[TweetReferencedTweetsInner], Field(min_length=1)]] = Field(default=None, description="A list of Tweets this Tweet refers to. For example, if the parent Tweet is a Retweet, a Quoted Tweet or a Reply, it will include the related Tweet referenced to by its parent.")
    reply_settings: Optional[ReplySettingsWithVerifiedUsers] = None
    source: Optional[StrictStr] = Field(default=None, description="This is deprecated.")
    text: StrictStr = Field(description="The content of the Tweet.")
    withheld: Optional[TweetWithheld] = None
    __properties: ClassVar[List[str]] = ["attachments", "author_id", "context_annotations", "conversation_id", "created_at", "edit_controls", "edit_history_tweet_ids", "entities", "geo", "id", "in_reply_to_user_id", "lang", "non_public_metrics", "note_tweet", "organic_metrics", "possibly_sensitive", "promoted_metrics", "public_metrics", "referenced_tweets", "reply_settings", "source", "text", "withheld"]

    @field_validator('author_id')
    def author_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{1,19}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{1,19}$/")
        return value

    @field_validator('conversation_id')
    def conversation_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{1,19}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{1,19}$/")
        return value

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9]{1,19}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{1,19}$/")
        return value

    @field_validator('in_reply_to_user_id')
    def in_reply_to_user_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{1,19}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{1,19}$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Tweet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attachments
        if self.attachments:
            _dict['attachments'] = self.attachments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in context_annotations (list)
        _items = []
        if self.context_annotations:
            for _item in self.context_annotations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['context_annotations'] = _items
        # override the default output from pydantic by calling `to_dict()` of edit_controls
        if self.edit_controls:
            _dict['edit_controls'] = self.edit_controls.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entities
        if self.entities:
            _dict['entities'] = self.entities.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geo
        if self.geo:
            _dict['geo'] = self.geo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of non_public_metrics
        if self.non_public_metrics:
            _dict['non_public_metrics'] = self.non_public_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of note_tweet
        if self.note_tweet:
            _dict['note_tweet'] = self.note_tweet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organic_metrics
        if self.organic_metrics:
            _dict['organic_metrics'] = self.organic_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of promoted_metrics
        if self.promoted_metrics:
            _dict['promoted_metrics'] = self.promoted_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of public_metrics
        if self.public_metrics:
            _dict['public_metrics'] = self.public_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in referenced_tweets (list)
        _items = []
        if self.referenced_tweets:
            for _item in self.referenced_tweets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['referenced_tweets'] = _items
        # override the default output from pydantic by calling `to_dict()` of withheld
        if self.withheld:
            _dict['withheld'] = self.withheld.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Tweet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attachments": TweetAttachments.from_dict(obj.get("attachments")) if obj.get("attachments") is not None else None,
            "author_id": obj.get("author_id"),
            "context_annotations": [ContextAnnotation.from_dict(_item) for _item in obj.get("context_annotations")] if obj.get("context_annotations") is not None else None,
            "conversation_id": obj.get("conversation_id"),
            "created_at": obj.get("created_at"),
            "edit_controls": TweetEditControls.from_dict(obj.get("edit_controls")) if obj.get("edit_controls") is not None else None,
            "edit_history_tweet_ids": obj.get("edit_history_tweet_ids"),
            "entities": FullTextEntities.from_dict(obj.get("entities")) if obj.get("entities") is not None else None,
            "geo": TweetGeo.from_dict(obj.get("geo")) if obj.get("geo") is not None else None,
            "id": obj.get("id"),
            "in_reply_to_user_id": obj.get("in_reply_to_user_id"),
            "lang": obj.get("lang"),
            "non_public_metrics": TweetNonPublicMetrics.from_dict(obj.get("non_public_metrics")) if obj.get("non_public_metrics") is not None else None,
            "note_tweet": TweetNoteTweet.from_dict(obj.get("note_tweet")) if obj.get("note_tweet") is not None else None,
            "organic_metrics": TweetOrganicMetrics.from_dict(obj.get("organic_metrics")) if obj.get("organic_metrics") is not None else None,
            "possibly_sensitive": obj.get("possibly_sensitive"),
            "promoted_metrics": TweetPromotedMetrics.from_dict(obj.get("promoted_metrics")) if obj.get("promoted_metrics") is not None else None,
            "public_metrics": TweetPublicMetrics.from_dict(obj.get("public_metrics")) if obj.get("public_metrics") is not None else None,
            "referenced_tweets": [TweetReferencedTweetsInner.from_dict(_item) for _item in obj.get("referenced_tweets")] if obj.get("referenced_tweets") is not None else None,
            "reply_settings": obj.get("reply_settings"),
            "source": obj.get("source"),
            "text": obj.get("text"),
            "withheld": TweetWithheld.from_dict(obj.get("withheld")) if obj.get("withheld") is not None else None
        })
        return _obj


