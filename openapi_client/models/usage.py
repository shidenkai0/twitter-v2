# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints

    The version of the OpenAPI document: 2.79
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from openapi_client.models.client_app_usage import ClientAppUsage
from openapi_client.models.usage_daily_project_usage import UsageDailyProjectUsage
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Usage(BaseModel):
    """
    Usage per client app
    """ # noqa: E501
    cap_reset_day: Optional[StrictInt] = Field(default=None, description="Number of days left for the Tweet cap to reset")
    daily_client_app_usage: Optional[Annotated[List[ClientAppUsage], Field(min_length=1)]] = Field(default=None, description="The daily usage breakdown for each Client Application a project")
    daily_project_usage: Optional[UsageDailyProjectUsage] = None
    project_cap: Optional[StrictInt] = Field(default=None, description="Total number of Tweets that can be read in this project per month")
    project_id: Optional[StrictStr] = Field(default=None, description="The unique identifier for this project")
    project_usage: Optional[StrictInt] = Field(default=None, description="The number of Tweets read in this project")
    __properties: ClassVar[List[str]] = ["cap_reset_day", "daily_client_app_usage", "daily_project_usage", "project_cap", "project_id", "project_usage"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Usage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in daily_client_app_usage (list)
        _items = []
        if self.daily_client_app_usage:
            for _item in self.daily_client_app_usage:
                if _item:
                    _items.append(_item.to_dict())
            _dict['daily_client_app_usage'] = _items
        # override the default output from pydantic by calling `to_dict()` of daily_project_usage
        if self.daily_project_usage:
            _dict['daily_project_usage'] = self.daily_project_usage.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Usage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cap_reset_day": obj.get("cap_reset_day"),
            "daily_client_app_usage": [ClientAppUsage.from_dict(_item) for _item in obj.get("daily_client_app_usage")] if obj.get("daily_client_app_usage") is not None else None,
            "daily_project_usage": UsageDailyProjectUsage.from_dict(obj.get("daily_project_usage")) if obj.get("daily_project_usage") is not None else None,
            "project_cap": obj.get("project_cap"),
            "project_id": obj.get("project_id"),
            "project_usage": obj.get("project_usage")
        })
        return _obj


