# coding: utf-8

"""
    Twitter API v2

    Twitter API v2 available endpoints

    The version of the OpenAPI document: 2.79
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from typing_extensions import Annotated
from twitter_v2.models.media import Media
from twitter_v2.models.place import Place
from twitter_v2.models.poll import Poll
from twitter_v2.models.topic import Topic
from twitter_v2.models.tweet import Tweet
from twitter_v2.models.user import User
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Expansions(BaseModel):
    """
    Expansions
    """ # noqa: E501
    media: Optional[Annotated[List[Media], Field(min_length=1)]] = None
    places: Optional[Annotated[List[Place], Field(min_length=1)]] = None
    polls: Optional[Annotated[List[Poll], Field(min_length=1)]] = None
    topics: Optional[Annotated[List[Topic], Field(min_length=1)]] = None
    tweets: Optional[Annotated[List[Tweet], Field(min_length=1)]] = None
    users: Optional[Annotated[List[User], Field(min_length=1)]] = None
    __properties: ClassVar[List[str]] = ["media", "places", "polls", "topics", "tweets", "users"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Expansions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in media (list)
        _items = []
        if self.media:
            for _item in self.media:
                if _item:
                    _items.append(_item.to_dict())
            _dict['media'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in places (list)
        _items = []
        if self.places:
            for _item in self.places:
                if _item:
                    _items.append(_item.to_dict())
            _dict['places'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in polls (list)
        _items = []
        if self.polls:
            for _item in self.polls:
                if _item:
                    _items.append(_item.to_dict())
            _dict['polls'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in topics (list)
        _items = []
        if self.topics:
            for _item in self.topics:
                if _item:
                    _items.append(_item.to_dict())
            _dict['topics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tweets (list)
        _items = []
        if self.tweets:
            for _item in self.tweets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tweets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in users (list)
        _items = []
        if self.users:
            for _item in self.users:
                if _item:
                    _items.append(_item.to_dict())
            _dict['users'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Expansions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "media": [Media.from_dict(_item) for _item in obj.get("media")] if obj.get("media") is not None else None,
            "places": [Place.from_dict(_item) for _item in obj.get("places")] if obj.get("places") is not None else None,
            "polls": [Poll.from_dict(_item) for _item in obj.get("polls")] if obj.get("polls") is not None else None,
            "topics": [Topic.from_dict(_item) for _item in obj.get("topics")] if obj.get("topics") is not None else None,
            "tweets": [Tweet.from_dict(_item) for _item in obj.get("tweets")] if obj.get("tweets") is not None else None,
            "users": [User.from_dict(_item) for _item in obj.get("users")] if obj.get("users") is not None else None
        })
        return _obj


